Index: src/main/java/hci/artedu/service/impl/EptServiceImpl.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package hci.artedu.service.impl;\n\nimport hci.artedu.common.ServerResponse;\nimport hci.artedu.dao.*;\nimport hci.artedu.pojo.*;\nimport hci.artedu.service.EptService;\nimport hci.artedu.utils.DateUtils;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.data.redis.hash.HashMapper;\nimport org.springframework.stereotype.Service;\nimport org.springframework.transaction.annotation.Propagation;\nimport org.springframework.transaction.annotation.Transactional;\n\nimport java.sql.Timestamp;\nimport java.util.*;\n\n/**\n * @ClassName EptServiceImpl\n * @Description TODO\n * @Author jiaxin\n * @Date 2020/10/27 10:56 上午\n * @Version 1.0\n **/\n@Service\npublic class EptServiceImpl implements EptService {\n\n    @Autowired\n    private ExperimentMapper experimentMapper;\n\n    @Autowired\n    private BigexperimentMapper bigexperimentMapper;\n\n    @Autowired\n    private ExperimentstepMapper experimentstepMapper;\n\n    @Autowired\n    private UserMapper userMapper;\n\n\n    @Autowired\n    private PointExperimentMapper pointExperimentMapper;\n\n    @Autowired\n    private KnowledgepointMapper knowledgepointMapper;\n\n    @Autowired\n    private EptrecordMapper eptrecordMapper;\n\n    @Autowired\n    private  PointrecordMapper pointrecordMapper;\n\n    @Autowired\n    private UserprocessMapper userprocessMapper;\n\n\n\n    @Transactional(propagation = Propagation.SUPPORTS)\n    public ServerResponse<ArrayList> getEptList()\n    {\n\n        /***\n         * @Author jiaxin\n         * @Description 获取小实验列表//TODO\n         * @Date 11:07 上午 2020/10/27\n         * @Param []\n         * @return hci.artedu.common.ServerResponse<java.util.ArrayList>\n         **/\n\n        ArrayList<Object> eptList = new ArrayList<Object>();\n        ExperimentExample eptExample = new ExperimentExample();\n        eptExample.setDistinct(false);\n        List<Experiment> epts = experimentMapper.selectByExample(eptExample);\n        for(Experiment ept : epts)\n        {\n            HashMap<String,Object> eptInfo = new HashMap<String, Object>();\n            eptInfo.put(\"eptId\",ept.getId());\n            eptInfo.put(\"eptName\",ept.getEptName());\n            eptInfo.put(\"eptTime\",ept.getEptTime());\n            eptInfo.put(\"coverPic\",ept.getCoverPic());\n            eptList.add(eptInfo);\n        }\n\n        return ServerResponse.createBySuccess(\"获取成功\",eptList);\n    }\n\n\n    @Override\n    @Transactional(propagation = Propagation.SUPPORTS)\n    public ServerResponse<HashMap<String,Object>> getBigEptInfo()\n    {\n        /**\n         * @Author jiaxin\n         * @Description 获取大实验的基本信息//TODO\n         * @Date 5:22 下午 2020/10/28\n         * @Param []\n         * @return hci.artedu.common.ServerResponse<java.util.HashMap < java.lang.String, java.lang.Object>>\n         **/\n        int eptId = 1;\n        Bigexperiment bigexperiment = bigexperimentMapper.selectByPrimaryKey(eptId);\n        HashMap<String,Object> eptInfo = new HashMap<String, Object>();\n        eptInfo.put(\"eptId\",bigexperiment.getId());\n        eptInfo.put(\"eptName\",bigexperiment.getName());\n        eptInfo.put(\"eptPassRate\",bigexperiment.getPassRate());\n        eptInfo.put(\"eptParticipateRate\",bigexperiment.getParticipateRate());\n        eptInfo.put(\"eptTime\",bigexperiment.getTime());\n        eptInfo.put(\"totalTime\",bigexperiment.getCourseTime());\n        eptInfo.put(\"content\",bigexperiment.getContent());\n        eptInfo.put(\"course\",bigexperiment.getCourse());\n        eptInfo.put(\"eptDes\",bigexperiment.getDes());\n        eptInfo.put(\"eptPic\",bigexperiment.getCoverPic());\n\n        return ServerResponse.createBySuccess(\"获取成功\",eptInfo);\n\n\n    }\n\n\n    @Override\n    @Transactional(propagation = Propagation.SUPPORTS)\n    public ServerResponse<HashMap<String,Object>> getEptBasicInfo(int eptId)\n    {\n        /**\n         * @Author jiaxin\n         * @Description 获取小实验基本信息//TODO\n         * @Date 11:00 上午 2020/10/29\n         * @Param [eptId]\n         * @return hci.artedu.common.ServerResponse<java.util.HashMap<java.lang.String,java.lang.Object>>\n         **/\n\n        Experiment experiment = experimentMapper.selectByPrimaryKey(eptId);\n        HashMap<String,Object> eptInfo = new HashMap<String, Object>();\n        eptInfo.put(\"eptId\",experiment.getId());\n        eptInfo.put(\"eptName\",experiment.getEptName());\n        eptInfo.put(\"englishName\",experiment.getEnglishName());\n        eptInfo.put(\"eptDes\",experiment.getDes());\n        eptInfo.put(\"difficultLevel\",experiment.getDifficultDegree());\n        eptInfo.put(\"passRate\",experiment.getPassRate());\n        eptInfo.put(\"stepNum\",experiment.getSteps());\n        eptInfo.put(\"knowledgePoint\",experiment.getKnowledgePoint());\n        eptInfo.put(\"scanNum\",experiment.getScanNum());\n        eptInfo.put(\"coverPic\",experiment.getCoverPic());\n\n        //获取步骤图\n        ExperimentstepExample experimentstepExample = new ExperimentstepExample();\n        ExperimentstepExample.Criteria criteria = experimentstepExample.createCriteria();\n        criteria.andEptIdEqualTo(experiment.getId());\n        List<Experimentstep> experimentsteps = experimentstepMapper.selectByExample(experimentstepExample);\n\n        ArrayList<Object> stepInfo = new ArrayList<Object>();\n        for(Experimentstep step:experimentsteps)\n        {\n            HashMap<String,Object> oneStepInfo = new HashMap<String, Object>();\n            oneStepInfo.put(\"num\",step.getStepNum());\n            oneStepInfo.put(\"name\",step.getStepName());\n            oneStepInfo.put(\"des\",step.getStepDes());\n            oneStepInfo.put(\"pic\",step.getStepPic());\n\n            stepInfo.add(oneStepInfo);\n\n        }\n\n        eptInfo.put(\"stepInfo\",stepInfo);\n\n        return ServerResponse.createBySuccess(\"获取成功\",eptInfo);\n\n\n\n\n\n\n\n    }\n\n    @Override\n    @Transactional(propagation = Propagation.SUPPORTS)\n    public ServerResponse<HashMap<String, Object>> getBigEptPurpose() {\n        /**\n         * @Author jiaxin\n         * @Description 获取某实验目的//TODO\n         * @Date 11:14 上午 2020/10/27\n         * @Param []\n         * @return hci.artedu.common.ServerResponse<java.util.HashMap < java.lang.String, java.lang.Object>>\n         **/\n\n        int eptId = 1;\n        Bigexperiment bigexperiment = bigexperimentMapper.selectByPrimaryKey((Integer) eptId);\n        HashMap<String, Object> eptInfo = new HashMap<String, Object>();\n        eptInfo.put(\"eptId\", bigexperiment.getId());\n        eptInfo.put(\"eptName\", bigexperiment.getName());\n        eptInfo.put(\"eptContent\", bigexperiment.getPurpose());\n        eptInfo.put(\"eptPic\", bigexperiment.getPurposePic());\n\n\n        return ServerResponse.createBySuccess(\"获取成功\", eptInfo);\n\n\n    }\n\n    @Override\n    @Transactional(propagation = Propagation.SUPPORTS)\n    public ServerResponse<HashMap<String, Object>> getBigEptRequirement() {\n        /**\n         * @Author myz\n         * @Description 获取某实验要求//TODO\n         * @Date 9：50 上午 2020/10/30\n         * @Param []\n         * @return hci.artedu.common.ServerResponse<java.util.HashMap < java.lang.String, java.lang.Object>>\n         **/\n        int eptId = 1;  //only one bigExpt\n        Bigexperiment bigexperiment = bigexperimentMapper.selectByPrimaryKey((Integer) eptId);\n        HashMap<String, Object> eptInfo = new HashMap<String, Object>();\n        eptInfo.put(\"eptId\", bigexperiment.getId());\n        eptInfo.put(\"eptName\", bigexperiment.getName());\n        eptInfo.put(\"eptContent\", bigexperiment.getRequirement());\n        eptInfo.put(\"eptPic\", bigexperiment.getRequirementPic());\n\n        return ServerResponse.createBySuccess(\"获取成功\", eptInfo);\n    }\n\n    @Override\n    @Transactional(propagation = Propagation.SUPPORTS)\n    public ServerResponse<HashMap<String, Object>> getBigEptPrinciple() {\n        /**\n         * @Author myz\n         * @Description 获取某实验原理//TODO\n         * @Date 9：50 上午 2020/10/30\n         * @Param []\n         * @return hci.artedu.common.ServerResponse<java.util.HashMap < java.lang.String, java.lang.Object>>\n         **/\n\n        int eptId = 1;\n        Bigexperiment bigexperiment = bigexperimentMapper.selectByPrimaryKey((Integer) eptId);\n        HashMap<String, Object> eptInfo = new HashMap<String, Object>();\n        eptInfo.put(\"eptId\", bigexperiment.getId());\n        eptInfo.put(\"eptName\", bigexperiment.getName());\n        eptInfo.put(\"eptContent\", bigexperiment.getPrinciple());\n        eptInfo.put(\"eptPic\", bigexperiment.getPrinciplePic());\n\n        return ServerResponse.createBySuccess(\"获取成功\", eptInfo);\n    }\n\n    @Override\n    @Transactional(propagation = Propagation.SUPPORTS)\n    public ServerResponse<HashMap<String, Object>> getBigEptMethod() {\n        /**\n         * @Author myz\n         * @Description 获取某实验方法//TODO\n         * @Date 9：50 上午 2020/10/30\n         * @Param []\n         * @return hci.artedu.common.ServerResponse<java.util.HashMap < java.lang.String, java.lang.Object>>\n         **/\n\n        int eptId = 1;\n        Bigexperiment bigexperiment = bigexperimentMapper.selectByPrimaryKey((Integer) eptId);\n        HashMap<String, Object> eptInfo = new HashMap<String, Object>();\n        eptInfo.put(\"eptId\", bigexperiment.getId());\n        eptInfo.put(\"eptName\", bigexperiment.getName());\n        eptInfo.put(\"eptContent\", bigexperiment.getMethod());\n        eptInfo.put(\"eptPic\", bigexperiment.getMethodPic());\n\n        return ServerResponse.createBySuccess(\"获取成功\", eptInfo);\n    }\n\n    @Override\n    @Transactional(propagation = Propagation.SUPPORTS)\n    public ServerResponse<HashMap<String, Object>> getBigEptStep() {\n        /**\n         * @Author myz\n         * @Description 获取某实验步骤//TODO\n         * @Date 9：50 上午 2020/10/30\n         * @Param []\n         * @return hci.artedu.common.ServerResponse<java.util.HashMap < java.lang.String, java.lang.Object>>\n         **/\n\n        int eptId = 1;\n        Bigexperiment bigexperiment = bigexperimentMapper.selectByPrimaryKey((Integer) eptId);\n        HashMap<String, Object> eptInfo = new HashMap<String, Object>();\n        eptInfo.put(\"eptId\", bigexperiment.getId());\n        eptInfo.put(\"eptName\", bigexperiment.getName());\n        eptInfo.put(\"eptContent\", bigexperiment.getSteps());\n        eptInfo.put(\"eptPic\", bigexperiment.getStepPic());\n\n        return ServerResponse.createBySuccess(\"获取成功\", eptInfo);\n    }\n\n    @Override\n    @Transactional(propagation = Propagation.SUPPORTS)\n    public ServerResponse<HashMap<String, Object>> getBigEptDevice() {\n        /**\n         * @Author myz\n         * @Description 获取某实验仪器设备//TODO\n         * @Date 9：50 上午 2020/10/30\n         * @Param []\n         * @return hci.artedu.common.ServerResponse<java.util.HashMap < java.lang.String, java.lang.Object>>\n         **/\n\n        int eptId = 1;\n        Bigexperiment bigexperiment = bigexperimentMapper.selectByPrimaryKey((Integer) eptId);\n        HashMap<String, Object> eptInfo = new HashMap<String, Object>();\n        eptInfo.put(\"eptId\", bigexperiment.getId());\n        eptInfo.put(\"eptName\", bigexperiment.getName());\n        eptInfo.put(\"eptContent\", bigexperiment.getDevice());\n        eptInfo.put(\"eptPic\", bigexperiment.getDevicePic());\n\n        return ServerResponse.createBySuccess(\"获取成功\", eptInfo);\n    }\n\n\n    //开始实验\n\n    @Override\n    @Transactional(propagation = Propagation.REQUIRED)//增加事务回滚\n    public ServerResponse<Boolean> beginExperiment(int userid,int expId)\n    {\n        /**\n         * @Author jiaxin\n         * @Description 开始实验；记录实验开始的时间？【或许获取进度？】//TODO\n         * @Date 10:04 下午 2020/11/2\n         * @Param [userid用户id, expId实验id]\n         * @return hci.artedu.common.ServerResponse<java.lang.Boolean>\n         **/\n\n        //写日志\n        User user = userMapper.selectByPrimaryKey(userid);\n        Experiment experiment = experimentMapper.selectByPrimaryKey(expId);\n\n//        Useroperation useroperation = new Useroperation();\n//        useroperation.setUserId(user.getId());\n//        useroperation.setUserOperation(\"beginEpt\");\n//        useroperation.setParams(Integer.toString(experiment.getId()));\n//        useroperation.setUserName(user.getUserName());\n//        Timestamp beginTime = DateUtils.nowDateTime();\n//        useroperation.setOperationTime(beginTime);\n//        useroperationMapper.insert(useroperation);\n\n        return ServerResponse.createBySuccess(\"开始成功\", true);\n\n\n    }\n\n    @Override\n    @Transactional(propagation = Propagation.REQUIRED)//增加事务回滚\n    public ServerResponse endPostExperiment(EptRecord eptRecord)\n    {\n        /**\n         * @Author jiaxin\n         * @Description 实验结束后提交信息//TODO\n         * @Date 10:49 上午 2020/11/5\n         * @Param [eptRecord]\n         * @return hci.artedu.common.ServerResponse\n         **/\n\n        eptrecordMapper.insert(eptRecord);//记录实验相关\n        //写日志\n        //写日志\n        User user = userMapper.selectByPrimaryKey(eptRecord.getUserid());\n        Experiment experiment = experimentMapper.selectByPrimaryKey(eptRecord.getEptId());\n//\n//        Useroperation useroperation = new Useroperation();\n//        useroperation.setUserId(user.getId());\n//        useroperation.setUserOperation(\"endEpt\");\n//        useroperation.setParams(Integer.toString(experiment.getId()));\n//        useroperation.setUserName(user.getUserName());\n//        Timestamp endTime = DateUtils.nowDateTime();\n//        useroperation.setOperationTime(endTime);\n//\n//        useroperationMapper.insert(useroperation);\n\n        return ServerResponse.createBySuccessMessage(\"记录成功\");\n\n    }\n\n    @Override\n    @Transactional(propagation = Propagation.SUPPORTS)\n    public ServerResponse<ArrayList> getUserExperimentProcess(int userId)\n    {\n        /**\n         * @Author jiaxin\n         * @Description 获取某用户的实验进度-不用了//TODO\n         * @Date 10:49 上午 2020/11/5\n         * @Param [userId]\n         * @return hci.artedu.common.ServerResponse<java.util.ArrayList>\n         **/\n\n        User user = userMapper.selectByPrimaryKey(userId);\n        EptRecordExample eptRecordExample = new EptRecordExample();\n        EptRecordExample.Criteria criteria = eptRecordExample.createCriteria();\n        criteria.andUseridEqualTo(user.getId());\n        List<EptRecord> eptRecordList = eptrecordMapper.selectByExample(eptRecordExample);\n\n        ArrayList<Object> userProcess = new ArrayList<Object>();\n        for(EptRecord eptRecord:eptRecordList)\n        {\n            HashMap<String,Object> map = new HashMap<String, Object>();\n            map.put(\"eptId\",eptRecord.getEptId());\n            Experiment experiment = experimentMapper.selectByPrimaryKey(eptRecord.getEptId());\n            map.put(\"eptName\",experiment.getEptName());\n\n            userProcess.add(map);\n        }\n\n        return ServerResponse.createBySuccess(\"获取成功\", userProcess);\n\n    }\n\n    @Override\n    @Transactional(propagation = Propagation.SUPPORTS)\n    public ServerResponse<ArrayList> getEptPoint(int eptId)\n    {\n        /**\n         * @Author jiaxin\n         * @Description 获取某个实验对应的知识点列表//TODO\n         * @Date 4:58 下午 2020/11/4\n         * @Param [eptId]\n         * @return hci.artedu.common.ServerResponse<java.util.ArrayList>\n         **/\n\n        Experiment experiment = experimentMapper.selectByPrimaryKey(eptId);\n        PointExperimentExample pointExperimentExample = new PointExperimentExample();\n        PointExperimentExample.Criteria criteria = pointExperimentExample.createCriteria();\n        criteria.andEptIdEqualTo(experiment.getId());\n        List<PointExperiment> pointExperimentList = pointExperimentMapper.selectByExample(pointExperimentExample);\n\n        ArrayList<Object> pointList = new ArrayList<>();\n        for(PointExperiment pointExperiment:pointExperimentList)\n        {\n            Knowledgepoint knowledgepoint = knowledgepointMapper.selectByPrimaryKey(pointExperiment.getPointId());\n            HashMap<String,Object> map = new HashMap<String, Object>();\n            map.put(\"id\",knowledgepoint.getId());\n            map.put(\"pointName\",knowledgepoint.getName());\n            pointList.add(map);\n\n        }\n        return ServerResponse.createBySuccess(\"获取成功\", pointList);\n\n\n\n    }\n\n    @Override\n    public ServerResponse<HashMap<String, Object>> getAllTimeLength() {\n        return null;\n    }\n\n    @Override\n    public ServerResponse<HashMap<String, Object>> getStudentMasterAttitude() {\n        UserExample example = new UserExample();\n        UserExample.Criteria criteria =  example.createCriteria();\n        criteria.andUserTypeEqualTo(0);\n        criteria.andUserAttitudeIsNotNull();\n        criteria.andLevelOfMasteryIsNotNull();\n        int averageLike = 0;\n        int averageNormal = 0;\n        int averageDislike = 0;\n        List<User> uList = userMapper.selectByExample(example);\n        for(User u:uList){\n            if(u.getUserAttitude() == 0){\n                averageLike ++;\n            }\n            else if(u.getUserAttitude() == 1){\n                averageNormal++;\n            }\n            else if(u.getUserAttitude() == 2){\n                averageDislike++;\n            }\n        }\n        HashMap<String,Object> averInfo = new HashMap<String, Object>();\n        averInfo.put(\"averageLike\",averageLike);\n        averInfo.put(\"averageNormal\",averageNormal);\n        averInfo.put(\"averageDislike\",averageDislike);\n\n        UserExample example1 = new UserExample();\n        UserExample.Criteria criteria1 =  example1.createCriteria();\n        criteria1.andUserTypeEqualTo(0);\n        criteria1.andUserAttitudeIsNotNull();\n        criteria1.andLevelOfMasteryIsNotNull();\n        criteria1.andUserGenderEqualTo(Boolean.TRUE);\n        int maleLike = 0;\n        int maleNormal = 0;\n        int maleDislike = 0;\n        List<User> uList1 = userMapper.selectByExample(example1);\n        for(User u:uList1){\n            if(u.getUserAttitude() == 0){\n                maleLike ++;\n            }\n            else if(u.getUserAttitude() == 1){\n                maleNormal++;\n            }\n            else if(u.getUserAttitude() == 2){\n                maleDislike++;\n            }\n        }\n        HashMap<String,Object> maleInfo = new HashMap<String, Object>();\n        averInfo.put(\"maleLike\",maleLike);\n        averInfo.put(\"maleNormal\",maleNormal);\n        averInfo.put(\"maleDislike\",maleDislike);\n\n        UserExample example2 = new UserExample();\n        UserExample.Criteria criteria2 =  example2.createCriteria();\n        criteria2.andUserTypeEqualTo(0);\n        criteria2.andUserAttitudeIsNotNull();\n        criteria2.andLevelOfMasteryIsNotNull();\n        criteria2.andUserGenderEqualTo(Boolean.FALSE);\n        int femaleLike = 0;\n        int femaleNormal = 0;\n        int femaleDislike = 0;\n        List<User> uList2 = userMapper.selectByExample(example2);\n        for(User u:uList2){\n            if(u.getUserAttitude() == 0){\n                femaleLike ++;\n            }\n            else if(u.getUserAttitude() == 1){\n                femaleNormal++;\n            }\n            else if(u.getUserAttitude() == 2){\n                femaleDislike++;\n            }\n        }\n        HashMap<String,Object> femaleInfo = new HashMap<String, Object>();\n        averInfo.put(\"femaleLike\",femaleLike);\n        averInfo.put(\"femaleNormal\",femaleNormal);\n        averInfo.put(\"femaleDislike\",femaleDislike);\n\n        HashMap<String, Object> res= new HashMap<>();\n        res.put(\"aver\", averInfo);\n        res.put(\"male\", maleInfo);\n        res.put(\"female\",femaleInfo);\n\n        return ServerResponse.createBySuccess(\"获取成功\", res);\n    }\n\n    @Override\n    public ServerResponse<HashMap<String, Object>> getStudentInfo(String studentName) {\n        UserExample example = new UserExample();\n        UserExample.Criteria criteria = example.createCriteria();\n        criteria.andUserNameEqualTo(studentName);\n        List<User> userList = userMapper.selectByExample(example);\n        User user =userList.get(0);\n        \n        HashMap<String,Object> studentInfo = new HashMap<>();//基本信息\n        studentInfo.put(\"userGender\", user.getUserGender());\n        studentInfo.put(\"userEmail\", user.getUserEmail());\n        studentInfo.put(\"schoolName\", user.getSchoolName());\n        studentInfo.put(\"className\", user.getClassName());\n        studentInfo.put(\"phoneNumber\", user.getPhoneNumber());\n        studentInfo.put(\"userAttitude\", user.getUserAttitude());\n        studentInfo.put(\"levelOfMastery\", user.getLevelOfMastery());\n        studentInfo.put(\"userEmail\", user.getUserEmail());\n\n        HashMap<String,Object> studentScore = new HashMap<>();\n//        EptRecordExample eptRecordExample = new EptRecordExample();\n//        EptRecordExample.Criteria criteria1 =eptRecordExample.createCriteria();\n//        criteria1.andUseridEqualTo(user.getId());\n\n        HashMap<String,Object> eptTime = new HashMap<>();//实验时长\n        EptRecordExample eptRecordExample1 = new EptRecordExample();\n        EptRecordExample.Criteria criteria2 =eptRecordExample1.createCriteria();\n        criteria2.andUseridEqualTo(user.getId());\n        List<EptRecord> eptRecordList = eptrecordMapper.selectByExample(eptRecordExample1);\n        long[] temp=new long[6];\n        for (int i = 0; i < 6; i++) {\n            for (EptRecord e: eptRecordList) {\n                if (e.getEptId() == i){\n                    temp[i] += e.getEndTime().getTime() - e.getStartTime().getTime();\n                }\n            }\n            eptTime.put(\"ept\"+i, temp[i]);\n        }\n        HashMap<String,Object> pointTime = new HashMap<>();//知识点时长 存在问题 现在就一个知识点\n        PointrecordExample pointrecordExample = new PointrecordExample();\n        PointrecordExample.Criteria criteria3 =pointrecordExample.createCriteria();\n        criteria3.andUserIdEqualTo(user.getId());\n        List<Pointrecord> pointrecordList = pointrecordMapper.selectByExample(pointrecordExample);\n        long[] temp1=new long[6];\n        for (int i = 0; i < 6; i++) {\n            for (Pointrecord p: pointrecordList) {\n                if (p.getPointId() == i){\n                    temp[i] += p.getCompleteTime().getTime();\n                }\n            }\n            pointTime.put(\"point\"+i, temp1[i]);\n        }\n        return null;\n\n    }\n\n    @Override\n    public ServerResponse<HashMap<String, Object>> getClassInfo(int classNumber) {\n       return null;\n    }\n\n    @Override\n    public ServerResponse<HashMap<String, Object>> getSchoolInfo(String schoolName) {\n        UserExample userExample = new UserExample();\n        UserExample.Criteria criteria = userExample.createCriteria();\n        criteria.andSchoolNameEqualTo(schoolName);\n        criteria.andUserTypeEqualTo(0);\n        int male = 0, female = 0, maleMastery0 = 0, maleMastery1 = 0, maleMastery2 = 0, femaleMastery0 = 0,\n                femaleMastery1 = 0, femaleMastery2 = 0, maleAttitude0 = 0, maleAttitude1 = 0,\n                maleAttitude2 = 0, femaleAttitude0 = 0,femaleAttitude1 = 0,femaleAttitude2 =0,averAttitude0 = 0,\n                averAttitude1 = 0, averAttitude2 = 0, averMastery0 = 0, averMastery1 = 0, averMastery2 = 0;\n        List<User> userList = userMapper.selectByExample(userExample);\n        for (User u:\n             userList) {\n            if(u.getUserGender()==Boolean.TRUE){\n                male += 1;\n                if(u.getUserAttitude() == 0){\n                    maleAttitude0 += 1;\n                }\n                if(u.getUserAttitude() == 1){\n                    maleAttitude1 += 1;\n                }\n                if(u.getUserAttitude() == 2){\n                    maleAttitude2 += 1;\n                }\n                if(u.getLevelOfMastery() ==0){\n                    maleMastery0 += 1;\n                }\n                if(u.getLevelOfMastery() == 1){\n                    maleMastery1 += 1;\n                }\n                if(u.getLevelOfMastery() == 2){\n                    maleMastery2 += 1;\n                }\n            }\n            else if(u.getUserGender()==Boolean.FALSE){\n                female += 1;\n                if(u.getUserAttitude() == 0){\n                    femaleAttitude0 += 1;\n                }\n                if(u.getUserAttitude() == 1){\n                    femaleAttitude1 += 1;\n                }\n                if(u.getUserAttitude() == 2){\n                    femaleAttitude2 += 1;\n                }\n                if(u.getLevelOfMastery() ==0){\n                    femaleMastery0 += 1;\n                }\n                if(u.getLevelOfMastery() == 1){\n                    femaleMastery1 += 1;\n                }\n                if(u.getLevelOfMastery() == 2){\n                    femaleMastery2 += 1;\n                }\n            }\n        }\n        int malePercent = male/userList.size();\n        int femalePercent = female/userList.size();\n        averAttitude0 = maleAttitude0 * malePercent + femaleAttitude0 * femalePercent;\n        averAttitude1 = maleAttitude1 * malePercent + femaleAttitude1 * femalePercent;\n        averAttitude2 = maleAttitude2 * malePercent + femaleAttitude2 * femalePercent;\n        averMastery0 = maleMastery0 * malePercent + femaleMastery0 * femalePercent;\n        averMastery1 = maleMastery1 * malePercent + femaleMastery1 * femalePercent;\n        averMastery2 = maleMastery2 * malePercent + femaleMastery2 * femalePercent;\n        return null;\n    }\n\n    @Override\n    public ServerResponse<HashMap<String, Object>> getEptCondition() {\n        return null;\n    }\n\n    @Override\n    public ServerResponse<HashMap<String, Object>> getStudentScore(String studentName) {\n        return null;\n    }\n\n    @Override\n    public ServerResponse<String> postAnswer(int userId, int eptId, int progress, Date time, Date startTime, Date endTime, Date date) {\n        /**\n         * TODO 好像没啥用\n         * @return hci.artedu.common.ServerResponse<java.lang.String>\n         * @Description \n         * @Author Leaf\n         * @Date 2020/11/11 8:24 下午\n         **/\n        EptRecord eptRecord = new EptRecord();\n        eptRecord.setUserid(userId);\n        eptRecord.setEptId(eptId);\n        eptRecord.setEptDate(date);\n        eptRecord.setStartTime(startTime);\n        eptRecord.setEndTime(endTime);\n        eptRecord.setDurTime(time);\n        return null;\n    }\n\n    @Override\n    public ServerResponse<HashMap<String, Object>> getRank(int userId, int id) {\n        return null;\n    }\n\n    @Override\n    public ServerResponse<String> postFeedback(int id, int difficultLevel, int exerciseLevel, int masteryLevel) {\n        /**\n         * TODO 提交实验 看结果 应该返回记录id  然后这里重写那个记录\n         * @return hci.artedu.common.ServerResponse<java.lang.String>\n         * @Description \n         * @Author Leaf\n         * @Date 2020/11/11 8:30 下午\n         **/\n        EptRecordExample eptRecordExample = new EptRecordExample();\n        EptRecordExample.Criteria critrtia = eptRecordExample.createCriteria();\n        critrtia.andIdEqualTo(id);\n        List<EptRecord> eptRecordList = eptrecordMapper.selectByExample(eptRecordExample);\n        EptRecord eptRecord =eptRecordList.get(0);\n        eptRecord.setDifficultyLevel(difficultLevel);\n        eptRecord.setExerciseLevel(exerciseLevel);\n        eptRecord.setMasteryLevel(masteryLevel);\n        return null;\n    }\n\n    @Override\n    public ServerResponse<HashMap<String, Object>> getScore(int userId, int eptId) {\n        return null;\n    }\n\n    @Override\n    public ServerResponse<HashMap<String, Object>> getReport(int userId) {\n        return null;\n    }\n\n\n//    @Override\n//    public ServerResponse<int[]> getEptProcess(int expId, int userId)\n//    {\n//        UserprocessExample userprocessExample = new UserprocessExample();\n//        UserprocessExample.Criteria criteria = userprocessExample.createCriteria();\n//        criteria.andEptIdEqualTo(expId);\n//        criteria.andUserIdEqualTo(userId);\n//\n//    }\n\n    //获取该用户该实验进度\n    public ServerResponse<int[]> getEptProcess(int eptId,int userId)\n    {\n        UserprocessExample userprocessExample = new UserprocessExample();\n        UserprocessExample.Criteria criteria = userprocessExample.createCriteria();\n        criteria.andEptIdEqualTo(eptId);\n        criteria.andUserIdEqualTo(userId);\n        List<Userprocess> userprocessList = userprocessMapper.selectByExample(userprocessExample);\n\n        int[] stageList = new int[userprocessList.size()];\n        int count = 0;\n        for(Userprocess userprocess:userprocessList)\n        {\n            stageList[count] = userprocess.getStageNum();\n            count++;\n        }\n\n        return ServerResponse.createBySuccess(\"获取成功\", stageList);\n\n\n    }\n\n    //用户过了某一关\n    @Override\n    @Transactional(propagation = Propagation.REQUIRED)//增加事务回滚\n    public ServerResponse<Boolean> postUserStageNum(int userId,int eptId,int stageNum)\n    {\n        /**\n         * @Author jiaxin\n         * @Description 用户过了某一关//TODO\n         * @Date 3:34 下午 2020/11/12\n         * @Param [userId, eptId, stageNum]\n         * @return hci.artedu.common.ServerResponse<int[]>\n         **/\n         //先查有没有此关的记录\n\n        UserprocessExample userprocessExample = new UserprocessExample();\n        UserprocessExample.Criteria criteria = userprocessExample.createCriteria();\n        criteria.andUserIdEqualTo(userId);\n        criteria.andEptIdEqualTo(eptId);\n        criteria.andStageNumEqualTo(stageNum);\n        List<Userprocess> userprocessList = userprocessMapper.selectByExample(userprocessExample);\n        if(userprocessList.size()!=0)\n        {\n            return ServerResponse.createByErrorMessage(\"已存在该记录\");\n        }\n        else\n        {\n            Userprocess userprocess = new Userprocess();\n            userprocess.setStageNum(stageNum);\n            userprocess.setEptId(eptId);\n            userprocess.setUserId(userId);\n            Timestamp nowTime = DateUtils.nowDateTime();\n            userprocess.setCompletetime(nowTime);\n            userprocessMapper.insert(userprocess);\n            return ServerResponse.createBySuccess(\"记录成功\",Boolean.TRUE);\n        }\n    }\n\n    //\n\n\n\n\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/hci/artedu/service/impl/EptServiceImpl.java	(revision 966752759b70ca47a4ec265f79772952fbca9e01)
+++ src/main/java/hci/artedu/service/impl/EptServiceImpl.java	(date 1605238554325)
@@ -439,11 +439,31 @@
 
     @Override
     public ServerResponse<HashMap<String, Object>> getAllTimeLength() {
+        /**
+         * TODO
+         * @return hci.artedu.common.ServerResponse<java.util.HashMap<java.lang.String,java.lang.Object>>
+         * @Description 学生总体时长统计
+         * @Author Leaf
+         * @Date 2020/11/13 11:32 上午
+         **/
+        //实验时长
+        int eptSum = 0;
+        EptRecordExample eptRecordExample = new EptRecordExample();
+
+        //学习时长
+        //在线时长
         return null;
     }
 
     @Override
     public ServerResponse<HashMap<String, Object>> getStudentMasterAttitude() {
+        /**
+         * TODO 
+         * @return hci.artedu.common.ServerResponse<java.util.HashMap<java.lang.String,java.lang.Object>>
+         * @Description 用于获取所有学生的喜好度和掌握程度
+         * @Author Leaf
+         * @Date 2020/11/13 10:16 上午
+         **/
         UserExample example = new UserExample();
         UserExample.Criteria criteria =  example.createCriteria();
         criteria.andUserTypeEqualTo(0);
@@ -531,6 +551,13 @@
 
     @Override
     public ServerResponse<HashMap<String, Object>> getStudentInfo(String studentName) {
+        /**
+         * TODO
+         * @return hci.artedu.common.ServerResponse<java.util.HashMap<java.lang.String,java.lang.Object>>
+         * @Description 通过学生姓名查询学生基本信息
+         * @Author Leaf
+         * @Date 2020/11/13 10:17 上午
+         **/
         UserExample example = new UserExample();
         UserExample.Criteria criteria = example.createCriteria();
         criteria.andUserNameEqualTo(studentName);
@@ -653,7 +680,36 @@
         averMastery0 = maleMastery0 * malePercent + femaleMastery0 * femalePercent;
         averMastery1 = maleMastery1 * malePercent + femaleMastery1 * femalePercent;
         averMastery2 = maleMastery2 * malePercent + femaleMastery2 * femalePercent;
-        return null;
+        HashMap<String,Object> AttitudeMap =new HashMap<>();
+        AttitudeMap.put("女生喜欢",femaleAttitude0);
+        AttitudeMap.put("女生一般",femaleAttitude1);
+        AttitudeMap.put("女生抵触", femaleAttitude2);
+        AttitudeMap.put("男生喜欢", maleAttitude0);
+        AttitudeMap.put("男生一般", maleAttitude1);
+        AttitudeMap.put("男生抵触", maleAttitude2);
+        AttitudeMap.put("平均喜欢", averAttitude0);
+        AttitudeMap.put("平均一般", averAttitude1);
+        AttitudeMap.put("平均抵触", averAttitude2);
+
+        HashMap<String,Object> MasteryMap = new HashMap<String, Object>();
+        MasteryMap.put("女生从未学过",femaleMastery0);
+        MasteryMap.put("女生学习1-3年",femaleMastery1);
+        MasteryMap.put("女生学习3年以上",femaleMastery2);
+        MasteryMap.put("男生从未学过",maleMastery0);
+        MasteryMap.put("男生学习1-3年",maleMastery1);
+        MasteryMap.put("男生学习3年以上",maleMastery2);
+        MasteryMap.put("平均从未学过",averMastery0);
+        MasteryMap.put("平均学习1-3年",averMastery1);
+        MasteryMap.put("平均学习3年以上",averMastery2);
+
+        HashMap<String,Object> res = new HashMap<>();
+        res.put("attitude",AttitudeMap);
+        res.put("Mastery",MasteryMap);
+        res.put("male",male);
+        res.put("female",female);
+        res.put("malePercent",malePercent);
+        res.put("femalePercent",femalePercent);
+        return ServerResponse.createBySuccess("获取成功", res);
     }
 
     @Override
Index: target/classes/application.yml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>web:\n  upload-path: static/\nspring:\n  datasource:\n    # 如果存在多个数据源，监控的时候可以通过名字来区分开来\n    name: mysql\n    # 连接数据库的url\n    url: jdbc:mysql://localhost:3306/simulator?useUnicode=true&characterEncoding=utf-8&useSSL=false&verifyServerCertificate=false&serverTimezone=GMT%2B8\n    # 连接数据库的账号\n    driver-class-name: com.mysql.cj.jdbc.Driver\n    username: root\n    #  连接数据库的密码\n    # password: 13541362\n    password: 19971019\n    #password: bupt20427\n\n    # 使用druid数据源\n    type: com.alibaba.druid.pool.DruidDataSource\n    # 扩展插件\n    # 监控统计用的filter:stat 日志用的filter:log4j 防御sql注入的filter:wall\n    filters: stat\n    # 最大连接池数量\n    maxActive: 20\n    # 初始化时建立物理连接的个数。初始化发生在显示调用init方法，或者第一次getConnection时\n    initialSize: 1\n    # 获取连接时最大等待时间，单位毫秒\n    maxWait: 60000\n    # 最小连接池数量\n    minIdle: 1\n    timeBetweenEvictionRunsMillis: 60000\n    # 连接保持空闲而不被驱逐的最长时间\n    minEvictableIdleTimeMillis: 300000\n    # 用来检测连接是否有效的sql，要求是一个查询语句\n    # 如果validationQuery为null，testOnBorrow、testOnReturn、testWhileIdle都不会其作用\n    validationQuery: select count(1) from 'table'\n    # 申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRunsMillis，执行validationQuery检测连接是否有效\n    testWhileIdle: true\n    # 申请连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能\n    testOnBorrow: false\n    # 归还连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能\n    testOnReturn: false\n    # 是否缓存preparedStatement，即PSCache\n    poolPreparedStatements: false\n    # 要启用PSCache，必须配置大于0，当大于0时，poolPreparedStatements自动触发修改为true\n    maxOpenPreparedStatements: -1\n#  security:\n#    user:\n#      password: 1234\n#      name: root\n\n  jackson:\n    #日期格式化\n    date-format: yyyy-MM-dd HH:mm:ss\n    time-zone: GMT+8\n#  data:\n#    mongodb:\n#      host: 127.0.0.1\n#      port: 27017\n#      database: testmongo1\n  resources:\n    static-locations: file:${web.upload-path}\n  # static-locations: classpath:static/,file:static/\n# pagehelper分页插件\npagehelper:\n  # 数据库的方言\n  helperDialect: mysql\n  # 启用合理化，如果pageNum < 1会查询第一页，如果pageNum > pages会查询最后一页\n  reasonable: true\n\nmybatis:\n  mapper-locations: classpath:mybatis/mapper/*.xml\n  type-aliases-package: hci.dky.pojo\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- target/classes/application.yml	(revision 966752759b70ca47a4ec265f79772952fbca9e01)
+++ target/classes/application.yml	(date 1605188185547)
@@ -11,7 +11,7 @@
     username: root
     #  连接数据库的密码
     # password: 13541362
-    password: 19971019
+    password: abc720904
     #password: bupt20427
 
     # 使用druid数据源
